#!/bin/bash

# GPUÁõëÊéßÂíåËá™Âä®ËÆ≠ÁªÉËÑöÊú¨
# ÂΩìGPUÂèØÁî®Êó∂Ëá™Âä®ËøêË°åAlphaFinÁºñÁ†ÅÂô®ÂæÆË∞É

echo "ü§ñ GPUÁõëÊéßÂíåËá™Âä®ËÆ≠ÁªÉËÑöÊú¨"
echo "Êó∂Èó¥: $(date)"
echo ""

# ÈÖçÁΩÆ
MONITOR_INTERVAL=300  # ÁõëÊéßÈó¥Èöî(Áßí) - 5ÂàÜÈíü
MAX_WAIT_TIME=86400   # ÊúÄÂ§ßÁ≠âÂæÖÊó∂Èó¥(Áßí) - 24Â∞èÊó∂
GPU_MEMORY_THRESHOLD=4000  # GPUÂÜÖÂ≠òÈòàÂÄº(MB) - 4GB
GPU_DEVICE=1  # ‰ΩøÁî®CUDA:1

# ËÆ≠ÁªÉÈÖçÁΩÆ
TRAIN_DATA="evaluate_mrr/alphafin_train_qc.jsonl"
EVAL_DATA="evaluate_mrr/alphafin_eval.jsonl"
OUTPUT_DIR="./models/alphafin_encoder_finetuned_gpu"
LOG_DIR="./logs"

# ÂàõÂª∫ÁõÆÂΩï
mkdir -p "$OUTPUT_DIR" "$LOG_DIR"

# Êó•ÂøóÊñá‰ª∂
LOG_FILE="$LOG_DIR/gpu_monitor_$(date +%Y%m%d_%H%M%S).log"
PID_FILE="$LOG_DIR/gpu_monitor.pid"

echo "üìä ÁõëÊéßÈÖçÁΩÆ:"
echo "  - ÁõëÊéßÈó¥Èöî: ${MONITOR_INTERVAL}Áßí (${MONITOR_INTERVAL}/60ÂàÜÈíü)"
echo "  - ÊúÄÂ§ßÁ≠âÂæÖ: ${MAX_WAIT_TIME}Áßí (${MAX_WAIT_TIME}/3600Â∞èÊó∂)"
echo "  - GPUÂÜÖÂ≠òÈòàÂÄº: ${GPU_MEMORY_THRESHOLD}MB"
echo "  - ËÆ≠ÁªÉÊï∞ÊçÆ: $TRAIN_DATA"
echo "  - ËæìÂá∫ÁõÆÂΩï: $OUTPUT_DIR"
echo "  - Êó•ÂøóÊñá‰ª∂: $LOG_FILE"
echo ""

# ËÆ∞ÂΩïPID
echo $$ > "$PID_FILE"
echo "üîÑ ÁõëÊéßËøõÁ®ãPID: $$"
echo "üí° ÂÅúÊ≠¢ÁõëÊéß: kill \$(cat $PID_FILE)"
echo ""

# Ê£ÄÊü•GPUÁä∂ÊÄÅÁöÑÂáΩÊï∞
check_gpu_status() {
    if ! command -v nvidia-smi &> /dev/null; then
        echo "‚ùå nvidia-smi ‰∏çÂèØÁî®ÔºåÊó†Ê≥ïÊ£ÄÊµãGPU"
        return 1
    fi
    
    # Ê£ÄÊü•ÊåáÂÆöGPUÊòØÂê¶ÂèØÁî®
    if ! nvidia-smi -i $GPU_DEVICE --query-gpu=name,memory.used,memory.total --format=csv,noheader,nounits &> /dev/null; then
        echo "‚ùå GPU:$GPU_DEVICE ‰∏çÂèØÁî®Êàñnvidia-smiÂá∫Èîô"
        return 1
    fi
    
    # Ëé∑ÂèñÊåáÂÆöGPU‰ø°ÊÅØ
    local gpu_info=$(nvidia-smi -i $GPU_DEVICE --query-gpu=name,memory.used,memory.total --format=csv,noheader,nounits)
    if [ -z "$gpu_info" ]; then
        echo "‚ùå Êó†Ê≥ïËé∑ÂèñGPU‰ø°ÊÅØ"
        return 1
    fi
    
    # Ëß£ÊûêGPU‰ø°ÊÅØ
    local gpu_name=$(echo "$gpu_info" | cut -d',' -f1 | tr -d ' ')
    local memory_used=$(echo "$gpu_info" | cut -d',' -f2 | tr -d ' ')
    local memory_total=$(echo "$gpu_info" | cut -d',' -f3 | tr -d ' ')
    local memory_available=$((memory_total - memory_used))
    
    echo "üîç GPU:$GPU_DEVICE Áä∂ÊÄÅÊ£ÄÊü•:"
    echo "  - GPUÂêçÁß∞: $gpu_name"
    echo "  - ÂÜÖÂ≠ò‰ΩøÁî®: ${memory_used}MB / ${memory_total}MB"
    echo "  - ÂèØÁî®ÂÜÖÂ≠ò: ${memory_available}MB"
    
    # Ê£ÄÊü•ÂÜÖÂ≠òÊòØÂê¶Ë∂≥Â§ü
    if [ $memory_available -ge $GPU_MEMORY_THRESHOLD ]; then
        echo "‚úÖ GPU:$GPU_DEVICE ÂèØÁî®ÔºÅÂÜÖÂ≠òÂÖÖË∂≥ (${memory_available}MB >= ${GPU_MEMORY_THRESHOLD}MB)"
        return 0
    else
        echo "‚ö†Ô∏è  GPU:$GPU_DEVICE ÂÜÖÂ≠ò‰∏çË∂≥ (${memory_available}MB < ${GPU_MEMORY_THRESHOLD}MB)"
        return 1
    fi
}

# ËøêË°åËÆ≠ÁªÉÁöÑÂáΩÊï∞
run_training() {
    echo ""
    echo "üöÄ GPUÂèØÁî®ÔºÅÂºÄÂßãËÆ≠ÁªÉ..."
    echo "Êó∂Èó¥: $(date)"
    echo ""
    
    # ËÆæÁΩÆGPUÁéØÂ¢ÉÂèòÈáè
    export CUDA_VISIBLE_DEVICES=$GPU_DEVICE
    export TOKENIZERS_PARALLELISM=false
    
    echo "üîß ËÆ≠ÁªÉÈÖçÁΩÆ:"
    echo "  - Âü∫Á°ÄÊ®°Âûã: Langboat/mengzi-bert-base-fin"
    echo "  - ËÆ≠ÁªÉÊï∞ÊçÆ: $TRAIN_DATA"
    echo "  - ËØÑ‰º∞Êï∞ÊçÆ: $EVAL_DATA"
    echo "  - ËæìÂá∫ÁõÆÂΩï: $OUTPUT_DIR"
    echo "  - ÊâπÊ¨°Â§ßÂ∞è: 16"
    echo "  - ËÆ≠ÁªÉËΩÆÊï∞: 5"
    echo "  - ÊúÄÂ§ßÊ†∑Êú¨Êï∞: ÂÖ®ÈÉ®Êï∞ÊçÆ (Êó†ÈôêÂà∂)"
    echo "  - ËØÑ‰º∞Ê≠•Êï∞: 200"
    echo "  - ËÆæÂ§á: GPU"
    echo ""
    
    # ËøêË°åËÆ≠ÁªÉ
    python finetune_alphafin_encoder_enhanced.py \
        --model_name "Langboat/mengzi-bert-base-fin" \
        --train_jsonl "$TRAIN_DATA" \
        --eval_jsonl "$EVAL_DATA" \
        --output_dir "$OUTPUT_DIR" \
        --batch_size 16 \
        --epochs 5 \
        --eval_steps 200
    
    local train_exit_code=$?
    
    echo ""
    echo "üìä ËÆ≠ÁªÉÂÆåÊàêÔºÅ"
    echo "Êó∂Èó¥: $(date)"
    echo "ÈÄÄÂá∫Á†Å: $train_exit_code"
    
    if [ $train_exit_code -eq 0 ]; then
        echo "‚úÖ ËÆ≠ÁªÉÊàêÂäüÂÆåÊàêÔºÅ"
        echo "üìÅ Ê®°Âûã‰øùÂ≠òÂú®: $OUTPUT_DIR"
        
        # Ê£ÄÊü•ÁªìÊûúÊñá‰ª∂
        if [ -f "$OUTPUT_DIR/model.safetensors" ]; then
            echo "‚úÖ Ê®°ÂûãÊñá‰ª∂Â∑≤ÁîüÊàê"
        fi
        
        if [ -f "$OUTPUT_DIR/eval/mrr_eval_mrr_evaluation_results.csv" ]; then
            echo "‚úÖ MRRËØÑ‰º∞ÁªìÊûúÂ∑≤ÁîüÊàê"
            echo "üìà ÊúÄÁªàMRRÁªìÊûú:"
            tail -1 "$OUTPUT_DIR/eval/mrr_eval_mrr_evaluation_results.csv"
        fi
    else
        echo "‚ùå ËÆ≠ÁªÉÂ§±Ë¥• (ÈÄÄÂá∫Á†Å: $train_exit_code)"
    fi
    
    # Ê∏ÖÁêÜPIDÊñá‰ª∂
    rm -f "$PID_FILE"
    exit 0
}

# ‰∏ªÁõëÊéßÂæ™ÁéØ
echo "üîÑ ÂºÄÂßãGPUÁõëÊéßÂæ™ÁéØ..."
echo "‚è∞ ÁõëÊéßÈó¥Èöî: ${MONITOR_INTERVAL}Áßí"
echo "‚è∞ ÊúÄÂ§ßÁ≠âÂæÖ: ${MAX_WAIT_TIME}Áßí"
echo ""

start_time=$(date +%s)
check_count=0

while true; do
    current_time=$(date +%s)
    elapsed_time=$((current_time - start_time))
    check_count=$((check_count + 1))
    
    echo ""
    echo "=== Á¨¨${check_count}Ê¨°Ê£ÄÊü• ==="
    echo "‚è∞ ÂΩìÂâçÊó∂Èó¥: $(date)"
    echo "‚è∞ Â∑≤Á≠âÂæÖ: ${elapsed_time}Áßí ($(($elapsed_time/60))ÂàÜÈíü)"
    echo "‚è∞ Ââ©‰ΩôÊó∂Èó¥: $(($MAX_WAIT_TIME - $elapsed_time))Áßí ($(($MAX_WAIT_TIME - $elapsed_time)/60))ÂàÜÈíü)"
    
    # Ê£ÄÊü•ÊòØÂê¶Ë∂ÖÊó∂
    if [ $elapsed_time -ge $MAX_WAIT_TIME ]; then
        echo ""
        echo "‚è∞ ËææÂà∞ÊúÄÂ§ßÁ≠âÂæÖÊó∂Èó¥ (${MAX_WAIT_TIME}Áßí)"
        echo "üí° Âª∫ËÆÆÊâãÂä®Ê£ÄÊü•GPUÁä∂ÊÄÅÊàñËøêË°åCPUËÆ≠ÁªÉ"
        echo ""
        echo "CPUËÆ≠ÁªÉÂëΩ‰ª§:"
        echo "./run_full_finetune_cpu.sh"
        break
    fi
    
    # Ê£ÄÊü•GPUÁä∂ÊÄÅ
    if check_gpu_status; then
        # GPUÂèØÁî®ÔºåËøêË°åËÆ≠ÁªÉ
        run_training
    else
        echo ""
        echo "‚è≥ GPU‰∏çÂèØÁî®ÔºåÁ≠âÂæÖ${MONITOR_INTERVAL}ÁßíÂêéÈáçËØï..."
        echo "üí° ÊâãÂä®Ê∏ÖÁêÜGPUÂÜÖÂ≠ò: nvidia-smi -i $GPU_DEVICE --gpu-reset"
        echo "üí° Êü•ÁúãGPUÁä∂ÊÄÅ: nvidia-smi -i $GPU_DEVICE"
        echo "üí° ÂÅúÊ≠¢ÁõëÊéß: kill \$(cat $PID_FILE)"
        
        # Á≠âÂæÖ‰∏ãÊ¨°Ê£ÄÊü•
        sleep $MONITOR_INTERVAL
    fi
done

# Ê∏ÖÁêÜPIDÊñá‰ª∂
rm -f "$PID_FILE"
echo ""
echo "üîö GPUÁõëÊéßÁªìÊùü"
echo "Êó∂Èó¥: $(date)" 